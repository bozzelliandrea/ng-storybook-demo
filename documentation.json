{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "UtilityService",
            "id": "injectable-UtilityService-1400e616c8c3f047bd8cdd7f8294576bb1b1130eaeaa4e76114019984c28b2cf36d895d8e8a7e6aa73b6f1bb1f2e420f312ac3e6ce22f858c93494e9b041ee1e",
            "file": "src/app/custom/utility.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "normalizeEvent",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "sender",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "InternalEvent",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "sender",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {InternalEvent} from \"./shared.type\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UtilityService {\n\n  constructor() { }\n\n  public static normalizeEvent(event: string, sender: any): InternalEvent {\n\n    return {\n      parent: sender,\n      source: event,\n      _internal: sender?.name.toLowerCase().replace(\"component\", \"_\") + event.toLowerCase()\n    } as InternalEvent;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 7
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "BadgeElement",
            "id": "class-BadgeElement-ccbc4e5eea54f6ec5b33c82b666e725280f7f94a5b7c04c44bc4d13045cac7b263fa39a28572361a390e4d5f19de7819cb14d5951fdc5fddf87fcf10ef234647",
            "file": "src/app/custom/shared.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ThemePalette} from \"@angular/material/core/common-behaviors/color\";\n\nexport class Element {\n  text!: string;\n\n  constructor(text: string) {\n    this.text = text;\n  }\n}\n\nexport class BadgeElement extends Element {\n  icon: string;\n  color: ThemePalette;\n\n  private constructor(text: string, icon: string, color: ThemePalette) {\n    super(text);\n    this.icon = icon;\n    this.color = color;\n  }\n\n  static of(text: string, icon?: string, color?: ThemePalette): BadgeElement {\n    return new BadgeElement(text, icon ?? \"bolt\", color ?? undefined)\n  }\n}\n\nexport type BadgeValue = number | string;\nexport type InternalEvent = {\n  parent: any;\n  source: string;\n  info?: string;\n  _internal: string\n}\nexport type Status = \"TODO\" | \"PROGRESS\" | \"END\";\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "icon",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "color",
                        "type": "ThemePalette",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "modifierKind": [
                    121
                ],
                "jsdoctags": [
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "icon",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "color",
                        "type": "ThemePalette",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ThemePalette",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "inheritance": {
                        "file": "Element"
                    }
                }
            ],
            "methods": [
                {
                    "name": "of",
                    "args": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "icon",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "color",
                            "type": "ThemePalette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "BadgeElement",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "text",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "icon",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "ThemePalette",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": "Element",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Element",
            "id": "class-Element-ccbc4e5eea54f6ec5b33c82b666e725280f7f94a5b7c04c44bc4d13045cac7b263fa39a28572361a390e4d5f19de7819cb14d5951fdc5fddf87fcf10ef234647",
            "file": "src/app/custom/shared.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import {ThemePalette} from \"@angular/material/core/common-behaviors/color\";\n\nexport class Element {\n  text!: string;\n\n  constructor(text: string) {\n    this.text = text;\n  }\n}\n\nexport class BadgeElement extends Element {\n  icon: string;\n  color: ThemePalette;\n\n  private constructor(text: string, icon: string, color: ThemePalette) {\n    super(text);\n    this.icon = icon;\n    this.color = color;\n  }\n\n  static of(text: string, icon?: string, color?: ThemePalette): BadgeElement {\n    return new BadgeElement(text, icon ?? \"bolt\", color ?? undefined)\n  }\n}\n\nexport type BadgeValue = number | string;\nexport type InternalEvent = {\n  parent: any;\n  source: string;\n  info?: string;\n  _internal: string\n}\nexport type Status = \"TODO\" | \"PROGRESS\" | \"END\";\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 4,
                "jsdoctags": [
                    {
                        "name": "text",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-fd208ec202747327cb3247ae856173402f26d7866b80e17793cacfcbc1cd1908eaa25ddae1641b537005dd67f9f83c7cce5ac4619f4478f32c5d34c7d5ac5ee9",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'ng-storybook-demo'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'ng-storybook-demo';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"content\" role=\"main\">\n  <app-header></app-header>\n  <app-dashboard></app-dashboard>\n</div>\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-a5a0203ad3f6444f687f46d3a779ee7872ef29b4947aa53eb270ca65e2e21ddc73f4cb344136aecba3cb5eab95770deedd64368a2dda7ba44a71a3acfc7dd0dd",
            "file": "src/app/custom/component/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "badgeList",
                    "defaultValue": "[\n    BadgeElement.of(\"Bugs\", \"bug_report\", \"warn\"),\n    BadgeElement.of(\"Component\" , \"css\", \"primary\"),\n    BadgeElement.of(\"Release\"),\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BadgeElement[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "colorScheme",
                    "defaultValue": "{\n    domain: ['#5AA454', '#A10A28', '#C7B42C', '#AAAAAA']\n  } as Color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "gradient",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showLegend",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showXAxis",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showXAxisLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showYAxis",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showYAxisLabel",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "single",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "view",
                    "defaultValue": "[700, 400]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[number, number]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "xAxisLabel",
                    "defaultValue": "'Country'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "yAxisLabel",
                    "defaultValue": "'Population'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onActivate",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onDeactivate",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\nimport {single} from './data';\nimport {Color} from \"@swimlane/ngx-charts/lib/utils/color-sets\";\nimport {BadgeElement} from \"../../shared.type\";\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent {\n\n  public single!: any[];\n  public badgeList: BadgeElement[] = [\n    BadgeElement.of(\"Bugs\", \"bug_report\", \"warn\"),\n    BadgeElement.of(\"Component\" , \"css\", \"primary\"),\n    BadgeElement.of(\"Release\"),\n  ];\n  public view: [number, number] = [700, 400];\n\n  // options\n  public showXAxis = true;\n  public showYAxis = true;\n  public gradient = false;\n  public showLegend = true;\n  public showXAxisLabel = true;\n  public xAxisLabel = 'Country';\n  public showYAxisLabel = true;\n  public yAxisLabel = 'Population';\n\n  public colorScheme = {\n    domain: ['#5AA454', '#A10A28', '#C7B42C', '#AAAAAA']\n  } as Color;\n\n  constructor() {\n    Object.assign(this, { single });\n  }\n\n  onSelect(event: any) {\n    console.log(event);\n  }\n\n  onActivate(data: any): void {\n    console.log('Activate', JSON.parse(JSON.stringify(data)));\n  }\n\n  onDeactivate(data: any): void {\n    console.log('Deactivate', JSON.parse(JSON.stringify(data)));\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#container {\n  display: flex;\n  flex-direction: row;\n}\n",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 33
            },
            "templateData": "<div id=\"container\">\n  <ngx-charts-bar-vertical\n    [view]=\"view\"\n    [scheme]=\"colorScheme\"\n    [results]=\"single\"\n    [gradient]=\"gradient\"\n    [xAxis]=\"showXAxis\"\n    [yAxis]=\"showYAxis\"\n    [legend]=\"showLegend\"\n    [showXAxisLabel]=\"showXAxisLabel\"\n    [showYAxisLabel]=\"showYAxisLabel\"\n    [xAxisLabel]=\"xAxisLabel\"\n    [yAxisLabel]=\"yAxisLabel\"\n    (select)=\"onSelect($event)\">\n  </ngx-charts-bar-vertical>\n  <ngx-charts-advanced-pie-chart\n    [view]=\"view\"\n    [scheme]=\"colorScheme\"\n    [results]=\"single\"\n    [gradient]=\"gradient\"\n    (select)=\"onSelect($event)\"\n    (activate)=\"onActivate($event)\"\n    (deactivate)=\"onDeactivate($event)\"\n  >\n  </ngx-charts-advanced-pie-chart>\n</div>\n<app-task [task]=\"'TestTask'\"\n          [description]=\"'This is my new Task'\"\n          [status]=\"'PROGRESS'\"\n          [badgeList]=\"badgeList\">\n</app-task>\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-1dd582a8cf06545c1b3ece4ccac306c6a7163f7514e1d70af13f22130edf256cd6a26da9c1afb52564673e156f4420772dcf71c94d2022fef9e2ebe42f1f1544",
            "file": "src/app/custom/component/header/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./navbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "navEvent",
                    "defaultValue": "new EventEmitter<InternalEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "counter$",
                    "defaultValue": "new BehaviorSubject<BadgeValue>(1)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<BadgeValue>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "navElementList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<Element>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "_buildNavElement",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_incrementCounter",
                    "args": [
                        {
                            "name": "previous",
                            "type": "BadgeValue",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "BadgeValue",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "previous",
                            "type": "BadgeValue",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "navClickHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport {BehaviorSubject, timer} from \"rxjs\";\nimport {BadgeValue, Element, InternalEvent} from \"../../shared.type\";\nimport {UtilityService} from \"../../utility.service\";\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  @Output() public navEvent = new EventEmitter<InternalEvent>();\n\n  public counter$: BehaviorSubject<BadgeValue> = new BehaviorSubject<BadgeValue>(1);\n  public navElementList: Array<Element> = [];\n\n  public ngOnInit(): void {\n    timer(0, 2000)\n      .subscribe(r => this.counter$.next(this._incrementCounter(this.counter$.value)));\n\n    this._buildNavElement();\n  }\n\n  public navClickHandler(event: string):void {\n    this.navEvent.emit(UtilityService.normalizeEvent(event, NavbarComponent));\n  }\n\n  private _incrementCounter(previous: BadgeValue): BadgeValue {\n    if (previous == 99 || typeof previous === 'string') {\n      return \"99+\";\n    } else {\n      return ++previous;\n    }\n  }\n\n  private _buildNavElement(): void {\n    this.navElementList = [\n      new Element(\"Home\"),\n      new Element(\"Wallet\"),\n      new Element(\"Currency\"),\n      new Element(\"Stats\"),\n    ]\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@mixin flex-center-alignment {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  justify-items: center;\n  align-items: center;\n}\n\n@mixin nav-hover {\n  background: white;\n  cursor: pointer;\n  color: black;\n}\n\nnav {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  background: #0c41b2;\n\n  #left-nav-panel, #right-nav-panel {\n    @include flex-center-alignment;\n  }\n\n  #right-nav-panel {\n    height: 50px;\n    width: 200px;\n    color: white;\n\n    &:hover {\n      @include nav-hover;\n    }\n  }\n\n  .nav-element {\n    width: 100px;\n    height: 50px;\n    color: white;\n\n    @include flex-center-alignment;\n\n    &:hover {\n      @include nav-hover;\n    }\n  }\n\n  #nav-icon {\n    font-size: 30px;\n  }\n}\n",
                    "styleUrl": "./navbar.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<nav>\n  <div id=\"left-nav-panel\">\n    <ng-container *ngFor=\"let elem of navElementList\">\n      <div class=\"nav-element\" (click)=\"navClickHandler(elem.text)\">\n        <span>{{elem.text}}</span>\n      </div>\n    </ng-container>\n  </div>\n  <div id=\"right-nav-panel\">\n        <mat-icon aria-hidden=\"false\"\n                  aria-label=\"Example home icon\"\n                  [matBadge]=\"counter$ | async\"\n                  matBadgeColor=\"warn\"\n                  id=\"nav-icon\">notifications</mat-icon>\n  </div>\n</nav>\n"
        },
        {
            "name": "TaskComponent",
            "id": "component-TaskComponent-6eb1c4c77098bf37b5fcd14347610fabed8f589225f521d761011a21f25d9abd47ca87d2581fa3c033b108130d53aab03b9b5b85ad82cd100ea8068c2c15841f",
            "file": "src/app/custom/component/task/task.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-task",
            "styleUrls": [],
            "styles": [
                "\n\n    :host {\n      --primary: black;\n      --secondary: #afaeae;\n      --font-primary: white;\n      --font-secondary: black;\n    }\n\n    .dark {\n      --primary: #afaeae;\n      --secondary: black;\n      --font-primary: black;\n      --font-secondary: white;\n    }\n\n    .task-container {\n      width: fit-content;\n      max-width: 350px;\n      block-size: fit-content;\n      display: block;\n      overflow: hidden;\n      background: var(--secondary);\n      border: var(--primary) 1px solid;\n      border-radius: 5px;\n      margin: 10px;\n\n      & span {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 6px;\n\n        background: var(--primary);\n        color: var(--font-primary);\n        text-align: center;\n        font-family: monospace;\n        font-size: 13px;\n      }\n\n      & p {\n        color: var(--font-secondary);\n        margin: 0;\n        font-size: 13px;\n        padding: 10px;\n      }\n\n      .badge-container {\n\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        padding: 10px;\n\n        & mat-chip {\n          width: fit-content;\n          block-size: fit-content;\n        }\n      }\n    }\n  "
            ],
            "template": "<div id=\"taskContainerId\" class=\"task-container\">\n  <span>\n    {{task}}\n    <mat-chip *ngIf=\"status\"\n              [selected]=\"status === 'PROGRESS' || status === 'END'\"\n              [color]=\"status === 'PROGRESS'\n                        ? 'primary'\n                        : status === 'END'\n                            ? 'accent'\n                            : null\">\n      {{status}}\n    </mat-chip>\n  </span>\n  <p>{{description}}</p>\n  <mat-chip-list class=\"badge-container\" *ngIf=\"badgeList.length > 0\">\n    <mat-chip *ngFor=\"let badge of badgeList\"\n              [color]=\"badge.color\" [selected]=\"badge.color != undefined\">\n      <mat-chip-avatar>\n        <mat-icon>{{badge.icon}}</mat-icon>\n      </mat-chip-avatar>\n      {{badge.text}}\n    </mat-chip>\n  </mat-chip-list>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "badgeList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 2746,
                            "end": 2936,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2747,
                                "end": 2751,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "code"
                            },
                            "comment": "<p>\nhint:\nCreate a new badge with {@link BadgeElement.of} method, only text param is required,\nthe of method creates one default instance.\n</p>"
                        },
                        {
                            "pos": 2936,
                            "end": 3099,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 2937,
                                "end": 2944,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>BadgeElement.of(&quot;Bugs&quot;, &quot;bug_report&quot;, &quot;warn&quot;);\nBadgeElement.of(&quot;Component&quot; , &quot;css&quot;, &quot;primary&quot;);\nBadgeElement.of(&quot;Release&quot;);</p>\n"
                        },
                        {
                            "pos": 3099,
                            "end": 3224,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 3100,
                                "end": 3107,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "example"
                            },
                            "comment": "<p>[\n  {\n    &quot;text&quot;: &quot;Bugs&quot;,\n    &quot;icon&quot;: &quot;bug_report&quot;,\n    &quot;color&quot;: &quot;warn&quot;\n  }\n]</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nList of badge used for tag the task.\nEach badge is an implementation of {@link BadgeElement} class.\n\nParam is nullable\n\n\n<p>\nhint:\nCreate a new badge with {@link BadgeElement#of} method, only text param is required,\nthe of method creates one default instance.\n</p>\n\n```html\nBadgeElement.of(\"Bugs\", \"bug_report\", \"warn\");\nBadgeElement.of(\"Component\" , \"css\", \"primary\");\nBadgeElement.of(\"Release\");\n```\n\n```html\n[\n  {\n    \"text\": \"Bugs\",\n    \"icon\": \"bug_report\",\n    \"color\": \"warn\"\n  }\n]\n```",
                    "description": "<p>List of badge used for tag the task.\nEach badge is an implementation of {@link BadgeElement} class.</p>\n<p>Param is nullable</p>\n<p>\nhint:\nCreate a new badge with {@link BadgeElement#of} method, only text param is required,\nthe of method creates one default instance.\n</p>\n\n<div><pre class=\"line-numbers\"><code class=\"language-html\">BadgeElement.of(&quot;Bugs&quot;, &quot;bug_report&quot;, &quot;warn&quot;);\nBadgeElement.of(&quot;Component&quot; , &quot;css&quot;, &quot;primary&quot;);\nBadgeElement.of(&quot;Release&quot;);</code></pre></div><div><pre class=\"line-numbers\"><code class=\"language-html\">[\n  {\n    &quot;text&quot;: &quot;Bugs&quot;,\n    &quot;icon&quot;: &quot;bug_report&quot;,\n    &quot;color&quot;: &quot;warn&quot;\n  }\n]</code></pre></div>",
                    "line": 136,
                    "type": "BadgeElement[]",
                    "decorators": []
                },
                {
                    "name": "darkMode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 3435,
                            "end": 3552,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 3436,
                                "end": 3443,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 88,
                                "escapedText": "default"
                            },
                            "comment": "<p>false.</p>\n<p>\nif true: dark mode is On\n<br>\nif false: dark mode is Off\n</p>"
                        },
                        {
                            "pos": 3552,
                            "end": 3571,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 341,
                            "tagName": {
                                "pos": 3553,
                                "end": 3557,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "originalKeywordKind": 151,
                                "escapedText": "type"
                            },
                            "comment": "",
                            "typeExpression": {
                                "pos": 3558,
                                "end": 3565,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 307,
                                "type": {
                                    "pos": 3558,
                                    "end": 3565,
                                    "flags": 4194304,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 1,
                                    "kind": 133
                                }
                            }
                        },
                        {
                            "pos": 3571,
                            "end": 3587,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 3572,
                                "end": 3577,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "",
                            "name": {
                                "pos": 3578,
                                "end": 3583,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "isNameFirst": true,
                            "isBracketed": false
                        }
                    ],
                    "rawdescription": "\n\nToggle dark mode for the component.\n\n<p>\nif true: dark mode is On\n<br>\nif false: dark mode is Off\n</p>\n",
                    "description": "<p>Toggle dark mode for the component.</p>\n<p>\nif true: dark mode is On\n<br>\nif false: dark mode is Off\n</p>\n",
                    "line": 157,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nA description for the task, the content explain the scope of the task or what the user need to know before start.\nParam is nullable\n",
                    "description": "<p>A description for the task, the content explain the scope of the task or what the user need to know before start.\nParam is nullable</p>\n",
                    "line": 105,
                    "type": "string | undefined",
                    "decorators": []
                },
                {
                    "name": "status",
                    "defaultValue": "'TODO'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 3312,
                            "end": 3335,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 344,
                            "tagName": {
                                "pos": 3313,
                                "end": 3316,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "see"
                            },
                            "comment": "<p>{@link Status}</p>\n"
                        }
                    ],
                    "rawdescription": "\n\nTask status.\n\nSee {@link Status}\n",
                    "description": "<p>Task status.</p>\n<p>See {@link Status}</p>\n",
                    "line": 143,
                    "type": "Status",
                    "decorators": []
                },
                {
                    "name": "task",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nThe title of the created task.\n",
                    "description": "<p>The title of the created task.</p>\n",
                    "line": 99,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {BadgeElement, Status} from \"../../shared.type\";\n\n@Component({\n  selector: 'app-task',\n  template: `\n    <div id=\"taskContainerId\" class=\"task-container\">\n      <span>\n        {{task}}\n        <mat-chip *ngIf=\"status\"\n                  [selected]=\"status === 'PROGRESS' || status === 'END'\"\n                  [color]=\"status === 'PROGRESS'\n                            ? 'primary'\n                            : status === 'END'\n                                ? 'accent'\n                                : null\">\n          {{status}}\n        </mat-chip>\n      </span>\n      <p>{{description}}</p>\n      <mat-chip-list class=\"badge-container\" *ngIf=\"badgeList.length > 0\">\n        <mat-chip *ngFor=\"let badge of badgeList\"\n                  [color]=\"badge.color\" [selected]=\"badge.color != undefined\">\n          <mat-chip-avatar>\n            <mat-icon>{{badge.icon}}</mat-icon>\n          </mat-chip-avatar>\n          {{badge.text}}\n        </mat-chip>\n      </mat-chip-list>\n    </div>\n  `,\n  styles: [`\n\n    :host {\n      --primary: black;\n      --secondary: #afaeae;\n      --font-primary: white;\n      --font-secondary: black;\n    }\n\n    .dark {\n      --primary: #afaeae;\n      --secondary: black;\n      --font-primary: black;\n      --font-secondary: white;\n    }\n\n    .task-container {\n      width: fit-content;\n      max-width: 350px;\n      block-size: fit-content;\n      display: block;\n      overflow: hidden;\n      background: var(--secondary);\n      border: var(--primary) 1px solid;\n      border-radius: 5px;\n      margin: 10px;\n\n      & span {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 6px;\n\n        background: var(--primary);\n        color: var(--font-primary);\n        text-align: center;\n        font-family: monospace;\n        font-size: 13px;\n      }\n\n      & p {\n        color: var(--font-secondary);\n        margin: 0;\n        font-size: 13px;\n        padding: 10px;\n      }\n\n      .badge-container {\n\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        padding: 10px;\n\n        & mat-chip {\n          width: fit-content;\n          block-size: fit-content;\n        }\n      }\n    }\n  `]\n})\nexport class TaskComponent {\n\n  /**\n   * The title of the created task.\n   */\n  @Input() public task!: string;\n\n  /**\n   * A description for the task, the content explain the scope of the task or what the user need to know before start.\n   * Param is nullable\n   */\n  @Input() public description?: string | undefined;\n\n  /**\n   * List of badge used for tag the task.\n   * Each badge is an implementation of {@link BadgeElement} class.\n   *\n   * Param is nullable\n   *\n   * @code\n   *\n   * <p>\n   * hint:\n   * Create a new badge with {@link BadgeElement#of} method, only text param is required,\n   * the of method creates one default instance.\n   * </p>\n   *\n   * @example\n   * BadgeElement.of(\"Bugs\", \"bug_report\", \"warn\");\n   * BadgeElement.of(\"Component\" , \"css\", \"primary\");\n   * BadgeElement.of(\"Release\");\n   *\n   *\n   * @example\n   * [\n   *   {\n   *     \"text\": \"Bugs\",\n   *     \"icon\": \"bug_report\",\n   *     \"color\": \"warn\"\n   *   }\n   * ]\n   */\n  @Input() public badgeList: BadgeElement[] = [];\n\n  /**\n   * Task status.\n   *\n   * @see {@link Status}\n   */\n  @Input() public status?: Status = 'TODO';\n\n  /**\n   * Toggle dark mode for the component.\n   * @default false.\n   *\n   * <p>\n   * if true: dark mode is On\n   * <br>\n   * if false: dark mode is Off\n   * </p>\n   * @type boolean\n   * @param value\n   */\n  @Input() set darkMode(value: boolean) {\n    this._dark = value;\n    this._toggleDark();\n  }\n\n  get darkMode(): boolean {\n    return this._dark;\n  }\n\n  /**\n   * @ignore\n   * @private\n   */\n  private _dark: boolean = false;\n\n  /**\n   * @ignore\n   * @private\n   */\n  private _toggleDark(): void {\n    const element = document.getElementById(\"taskContainerId\");\n    if (element == null)\n      return;\n    else if (this._dark)\n      element.classList.add(\"dark\");\n    else\n      element.classList.remove(\"dark\");\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n\n    :host {\n      --primary: black;\n      --secondary: #afaeae;\n      --font-primary: white;\n      --font-secondary: black;\n    }\n\n    .dark {\n      --primary: #afaeae;\n      --secondary: black;\n      --font-primary: black;\n      --font-secondary: white;\n    }\n\n    .task-container {\n      width: fit-content;\n      max-width: 350px;\n      block-size: fit-content;\n      display: block;\n      overflow: hidden;\n      background: var(--secondary);\n      border: var(--primary) 1px solid;\n      border-radius: 5px;\n      margin: 10px;\n\n      & span {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 6px;\n\n        background: var(--primary);\n        color: var(--font-primary);\n        text-align: center;\n        font-family: monospace;\n        font-size: 13px;\n      }\n\n      & p {\n        color: var(--font-secondary);\n        margin: 0;\n        font-size: 13px;\n        padding: 10px;\n      }\n\n      .badge-container {\n\n        display: flex;\n        flex-direction: row;\n        justify-content: space-between;\n        padding: 10px;\n\n        & mat-chip {\n          width: fit-content;\n          block-size: fit-content;\n        }\n      }\n    }\n  \n",
            "accessors": {
                "darkMode": {
                    "name": "darkMode",
                    "setSignature": {
                        "name": "darkMode",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 157,
                        "rawdescription": "\n\nToggle dark mode for the component.\n\n<p>\nif true: dark mode is On\n<br>\nif false: dark mode is Off\n</p>\n",
                        "description": "<p>Toggle dark mode for the component.</p>\n<p>\nif true: dark mode is On\n<br>\nif false: dark mode is Off\n</p>\n",
                        "jsdoctags": [
                            {
                                "name": {
                                    "pos": 3578,
                                    "end": 3583,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "value"
                                },
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "pos": 3572,
                                    "end": 3577,
                                    "flags": 4227072,
                                    "modifierFlagsCache": 0,
                                    "transformFlags": 0,
                                    "kind": 79,
                                    "escapedText": "param"
                                },
                                "comment": ""
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "darkMode",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 162
                    }
                }
            }
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-895f23360343f96c603acdc42975dbd29ee8634f00f5083c67fa58d20afec049b7a3d6187fb9101d31220eab201babdffbbf9ab3ce81fd3d6c2398a9d82e2907",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {CustomModule} from \"./custom/custom.module\";\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    CustomModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "CustomModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-78922b3ae99d2c5249b333980bd5afde1b120b2cc6fedfd41b8b2cc90f279797cb4b22e183bf7e1d1dfab8c6100e77e7812c110234d81f866f544f28a3e18b15",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CustomModule",
            "id": "module-CustomModule-d066e27e5c4400927b3a114c2d2a809e55bedda70af0c886c5a11ba7576e906992954b0f0b9af9c833c09512c54035a57a0343fd8b4fb37ec56010988c151c20",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/custom/custom.module.ts",
            "methods": [],
            "sourceCode": "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NavbarComponent} from './component/header/navbar.component';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {DashboardComponent} from './component/dashboard/dashboard.component';\nimport {NgxChartsModule} from \"@swimlane/ngx-charts\";\nimport {BrowserAnimationsModule} from \"@angular/platform-browser/animations\";\nimport {FormsModule} from \"@angular/forms\";\nimport {BrowserModule} from \"@angular/platform-browser\";\nimport {TaskComponent} from './component/task/task.component';\nimport {MatChipsModule} from '@angular/material/chips';\n\n\n@NgModule({\n  declarations: [\n    NavbarComponent,\n    DashboardComponent,\n    TaskComponent\n  ],\n  imports: [\n    CommonModule,\n    MatIconModule,\n    MatBadgeModule,\n    MatChipsModule,\n    BrowserModule,\n    FormsModule,\n    NgxChartsModule,\n    BrowserAnimationsModule\n  ],\n  exports: [\n    NavbarComponent,\n    DashboardComponent,\n    TaskComponent\n  ]\n})\nexport class CustomModule {\n}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "NavbarComponent"
                        },
                        {
                            "name": "TaskComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "NavbarComponent"
                        },
                        {
                            "name": "TaskComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Accent",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  template: `<button mat-raised-button color=\"accent\">Accent</button>`,\n})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  template: `<button mat-raised-button>Basic</button>`,\n})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  props: args,\n  template: `<button mat-raised-button disabled>Disabled</button>`,\n})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Histogram",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/graph.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  template: `<button mat-raised-button color=\"primary\">Primary</button>`,\n})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "single",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/custom/component/dashboard/data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    \"name\": \"Bitcoin\",\n    \"value\": 8940000\n  },\n  {\n    \"name\": \"Dogcoin\",\n    \"value\": 5000000\n  },\n  {\n    \"name\": \"Coincoin\",\n    \"value\": 7200000\n  }\n]"
            },
            {
                "name": "Standard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/navbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/graph.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n    ...args\n  },\n  argTypes: {\n    view: { control: 'object' },\n    xAxis: { control: 'boolean' },\n    yAxis: { control: 'boolean' },\n    gradient: { control: 'boolean' },\n    legend: { control: 'boolean' },\n    showXAxisLabel: { control: 'boolean' },\n    xAxisLabel: { control: 'text' },\n    showYAxisLabel: { control: 'boolean' },\n    yAxisLabel: { control: 'text' },\n    scheme: { control: 'object' }\n  },\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/navbar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<NavbarComponent>",
                "defaultValue": "(args: NavbarComponent) => ({\n  props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/task.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "args => ({\n  props: {\n    ...args\n  },\n  argTypes: {\n    status: {\n      options: ['TODO', 'PROGRESS', 'END'],\n      control: { type: 'radio' },\n    },\n    darkMode: {\n      control: 'boolean',\n    }\n  },\n})"
            },
            {
                "name": "Warn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "(args) => ({\n  template: `<button mat-raised-button color=\"warn\">Warn</button>`,\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "BadgeValue",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "number | string",
                "file": "src/app/custom/shared.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "InternalEvent",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "src/app/custom/shared.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 181
            },
            {
                "name": "Status",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"TODO\" | \"PROGRESS\" | \"END\"",
                "file": "src/app/custom/shared.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/stories/button.stories.ts": [
                {
                    "name": "Accent",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  template: `<button mat-raised-button color=\"accent\">Accent</button>`,\n})"
                },
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  template: `<button mat-raised-button>Basic</button>`,\n})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  props: args,\n  template: `<button mat-raised-button disabled>Disabled</button>`,\n})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  template: `<button mat-raised-button color=\"primary\">Primary</button>`,\n})"
                },
                {
                    "name": "Warn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "(args) => ({\n  template: `<button mat-raised-button color=\"warn\">Warn</button>`,\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/stories/task.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/task.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n    ...args\n  },\n  argTypes: {\n    status: {\n      options: ['TODO', 'PROGRESS', 'END'],\n      control: { type: 'radio' },\n    },\n    darkMode: {\n      control: 'boolean',\n    }\n  },\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/graph.stories.ts": [
                {
                    "name": "Histogram",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/graph.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/graph.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "args => ({\n  props: {\n    ...args\n  },\n  argTypes: {\n    view: { control: 'object' },\n    xAxis: { control: 'boolean' },\n    yAxis: { control: 'boolean' },\n    gradient: { control: 'boolean' },\n    legend: { control: 'boolean' },\n    showXAxisLabel: { control: 'boolean' },\n    xAxisLabel: { control: 'text' },\n    showYAxisLabel: { control: 'boolean' },\n    yAxisLabel: { control: 'text' },\n    scheme: { control: 'object' }\n  },\n})"
                }
            ],
            "src/app/custom/component/dashboard/data.ts": [
                {
                    "name": "single",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/custom/component/dashboard/data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    \"name\": \"Bitcoin\",\n    \"value\": 8940000\n  },\n  {\n    \"name\": \"Dogcoin\",\n    \"value\": 5000000\n  },\n  {\n    \"name\": \"Coincoin\",\n    \"value\": 7200000\n  }\n]"
                }
            ],
            "src/stories/navbar.stories.ts": [
                {
                    "name": "Standard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/navbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/navbar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<NavbarComponent>",
                    "defaultValue": "(args: NavbarComponent) => ({\n  props: args\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/custom/shared.type.ts": [
                {
                    "name": "BadgeValue",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "number | string",
                    "file": "src/app/custom/shared.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "InternalEvent",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "src/app/custom/shared.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 181
                },
                {
                    "name": "Status",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"TODO\" | \"PROGRESS\" | \"END\"",
                    "file": "src/app/custom/shared.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 3,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/custom/component/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/custom/component/dashboard/data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "single",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/custom/component/header/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/custom/component/task/task.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TaskComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/app/custom/shared.type.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BadgeElement",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/custom/shared.type.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Element",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/custom/utility.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UtilityService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Accent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/graph.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Histogram",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/graph.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/navbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Standard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/navbar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/task.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}